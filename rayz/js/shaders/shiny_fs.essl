Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `
    precision highp float;
    uniform sampler2D probeTexture;

    varying vec4 worldPos;
    varying vec3 worldNormal;
    varying vec2 texCoord;
    varying vec3 rayDir;
    uniform vec3 eyePos;

    uniform mat4 quadrics[32];
    uniform mat4 multiClipQuad[32];
    uniform vec4 brdfs[16];
    uniform vec4 multiClipBrdfs[16];
    uniform vec4 lightSources[2];
    uniform vec3 lightPowerDensity[2];
    uniform vec3 direction;
    vec3 powerDensity;

    const int REG_NUM = 9;
    const int MULTI_CLIP_NUM = 4;

    bool make_gown(vec4 e, vec4 d, float bestT) {
        vec4 pos = e + d * bestT;
        if (mod(floor(pos.y), 2.0) == 0.0) return true;
        return false;
    }

    float intersectClippedQuadric(mat4 A, mat4 B, vec4 e, vec4 d, float id) {
        float a = dot(d * A, d);
        float b = dot(d * A, e) + dot(e * A, d);
        float c = dot(e * A, e);

        float D = b * b - 4.0 * a * c;
        if (D < 0.0) {
            return -1.0;
        }
        float t1 = (-b + sqrt(D)) / (2.0 * a);
        float t2 = (-b - sqrt(D)) / (2.0 * a);

        vec4 h1 = e + d * t1;
        vec4 h2 = e + d * t2;

        float result1 = dot(h1 * B, h1);
        float result2 = dot(h2 * B, h2);

        if (result1 > 0.0) {
            t1 = -1.0;
        }
        if (result2 > 0.0) {
            t2 = -1.0;
        }

        if (t1 < t2 && t1 > 0.0 || t2 < 0.0) {
            if (id == 4.0) {
                bool cut = make_gown(e, d, t1);
                if (cut) {
                    bool cut1 = make_gown(e,d,t2);
                    if (cut1) return -1.0;
                    return t2;
                }
            }
            return t1;
        }
        if (id == 4.0) {
            bool cut = make_gown(e,d,t2);
            if (cut) {
                bool cut1 = make_gown(e,d,t1);
                if (cut1) return -0.1;
                return t1;
            }
        }
        return t2;
    }

    float findMinPos(float t1, float t2) {
        if (t1 > 0.0 && t2 < 0.0) {
            return t1;
        }
        if (t2 > 0.0 && t1 < 0.0) {
            return t2;
        }
        return min(t1,t2);
    }

    float intersectMultiClip(mat4 A, mat4 B1, mat4 B2, vec4 e, vec4 d) {
        float a = dot(d * A, d);
        float b = dot(d * A, e) + dot(e * A, d);
        float c = dot(e * A, e);

        float D = b * b - 4.0 * a * c;
        if (D < 0.0) {
            return -1.0;
        }
        float t1 = (-b + sqrt(D)) / (2.0 * a);
        float t2 = (-b - sqrt(D)) / (2.0 * a);

        vec4 h1 = e + d * t1;
        vec4 h2 = e + d * t2;

        float result1 = dot(h1 * B1, h1);
        float result2 = dot(h2 * B1, h2);
        float result3 = dot(h1 * B2, h1);
        float result4 = dot(h2 * B2, h2);

    if (result1 > 0.0 || result3 > 0.0) {
        t1 = -1.0;
    }
    if (result2 > 0.0 || result4 > 0.0) {
        t2 = -1.0;
    }

    if (t1 < t2 && t1 > 0.0 || t2 < 0.0) {
        return t1;
    }
    return t2;
    }

    bool findBestHit(vec4 e, vec4 d, inout float bestT, out vec4 bestBrdf, out mat4 bestA, inout bool board) {
        vec4 tempBrdf;
        for (int i = 0; i < REG_NUM; i++) {
            float t = intersectClippedQuadric(quadrics[2*i], quadrics[2*i+1], e, d, brdfs[i].w);
            if (findMinPos(t, bestT) == t) {
                bestT = t;
                bestBrdf = brdfs[i];
                bestA = quadrics[2*i];
            }
        }

        for (int i = 0; i < MULTI_CLIP_NUM; i++) {
            float t = intersectMultiClip(multiClipQuad[3*i], multiClipQuad[3*i+1], multiClipQuad[3*i+2], e, d);
            if (findMinPos(t, bestT) == t) {
                bestT = t;
                bestBrdf = multiClipBrdfs[i];
                bestA = multiClipQuad[3*i];
                if (i == 2) board = true;
            }
        }



        return bestT >= 0.0;
    }

    vec3 get_color(vec3 worldNormal, vec4 worldPos, vec4 brdf) {
        vec3 light;
        float cos;
        float cos2;
        vec3 apparentColor = vec3(0,0,0);
        float shiny;
        vec3 h;

        for (int i = 0; i < 1; i++) {
            light = lightSources[i].xyz - lightSources[i].w * worldPos.xyz;
            cos = dot(normalize(light), normalize(worldNormal));
            cos2 = dot(normalize(light), normalize(direction));
            h = (normalize(light) + normalize(worldNormal)) / 2.0;
            if (lightSources[i].w == 1.0) {
                powerDensity = lightPowerDensity[i] * pow(cos2, 5.0);
            } else
                powerDensity = lightPowerDensity[i];
            vec3 M = powerDensity / dot(light, light);
            apparentColor += M * brdf.xyz * max(cos, 0.0) + M * brdf.xyz * pow(max(dot(worldNormal, h), 0.0), 5.0);
        }
        return apparentColor;
    }

    vec3 checker(vec4 worldPos, bool board) {
        if (!board) return vec3(0,0,0);

        if (mod(floor(worldPos.x / 4.0), 2.0) == 0.0) {
            if (mod(floor(worldPos.z / 4.0), 2.0) == 0.0)
                return vec3(0,0,0);
            if (mod(floor(worldPos.z / 4.0), 2.0) != 0.0)
                return vec3(1,1,1);
        }
        if (mod(floor(worldPos.x / 4.0), 2.0) != 0.0) {
            if (mod(floor(worldPos.z / 4.0), 2.0) == 0.0)
                return vec3(1,1,1);
            if (mod(floor(worldPos.z / 4.0), 2.0) != 0.0)
                return vec3(0,0,0);
        }
    }

    float noise(vec3 r) {
        vec3 s = vec3(7502, 22777, 4767);
        float f = 0.0;
        for (int i = 0; i < 16; i++) {
            f += sin(dot(s - vec3(32768, 32768, 32768), r * 40.0) / 65536.0);
            s = mod(s, 32768.0) * 2.0 + floor(s / 32768.0);
        }
        return f / 32.0 + 0.5;
    }

    vec3 noiseGrad(vec3 r) {
        vec3 s = vec3(7502, 22777, 4767);
        vec3 f = vec3(0.0, 0.0, 0.0);

        for (int i = 0; i < 16; i++) {
            f += cos(dot(s - vec3(32768, 32768, 32768), r * 40.0) / 65536.0) *
                 (s - vec3(32768, 32768, 32768)) * 40.0;
            s = mod(s, 32768.0) * 2.0 + floor(s / 32768.0);
        }
        return f / 65536.0;
    }

    vec3 get_wood(vec3 position, bool board) {
        if (!board) return vec3(0,0,0);

        float scale = 16.0;
        float turbulence = 500.0;
        float period = 8.0;
        float sharpness = 10.0;

        float w = position.x * period + pow(noise(position + scale), sharpness) * turbulence;
        w -= floor(w + 10000.0) - 10000.0;

        return vec3(1.0, 0.3, 0.0) * w + vec3(0.35, 0.1, 0.05) * (1.0 - w);
    }

    float get_shadows(vec3 pos, vec3 normal) {
        float bestT = -1.0;
        vec4 bestBrdf;
        mat4 bestA;
        bool board = false;
        vec4 shadowRay;
        bool hit = false;

        for (int i = 0; i < 1; i++) {
            if (dot(rayDir, normal) > 0.0)
                normal = -normal;
            pos += normal * 0.01;
            vec4 lightDir = vec4(normalize(lightSources[i].xyz), 0.0);
            hit = findBestHit(vec4(pos, 1.0), lightDir, bestT, bestBrdf, bestA, board);
        }
        if (hit) return 0.0;
        return 1.0;
    }

    void main(void) {
        vec4 e = vec4(eyePos, 1.0);
        vec4 d = vec4(rayDir, 0.0);

        float bestT = -1.0;
        vec4 bestBrdf;
        mat4 bestA;
        bool board = false;

        bool hit = findBestHit(e, d, bestT, bestBrdf, bestA, board);

        if (!hit) {
            vec3 viewDir = normalize(worldPos.xyz - eyePos);
            vec3 normal = normalize(rayDir.xyz);
            vec3 m = normalize(viewDir + normalize(rayDir.xyz));
            vec2 m2 = vec2(-m.x, -m.y) / 2.0 + vec2(0.5, 0.5);
            gl_FragColor = texture2D(probeTexture, m2);
        }
        else {
            vec4 intersect = e + d * bestT;
            vec3 normal = normalize((bestA * intersect + intersect * bestA).xyz);
            if (bestBrdf.w == 1.0) {
                normal = normalize(normal + noiseGrad(normal));
            }
            gl_FragColor = vec4((get_color(normal, intersect, bestBrdf) +
                                 checker(intersect, board) +
                                 get_wood(intersect.xyz, board)) *
                                 get_shadows(intersect.xyz, normal), 1);
        }
    }

`;
